{"version":3,"file":"static/js/454.ed9e4799.chunk.js","mappings":"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","sources":["main/libs/multi-flyby-calculator.ts","main/objects/multiflyby.ts"],"sourcesContent":["import MultiFlyby from \"../objects/multiflyby\";\nimport Trajectories from \"./trajectories\";\nimport FlybyCalcs from \"./flybycalcs\";\nimport Kepler from \"./kepler\";\nimport { sub3, mag3, vec3, randomSign, cartesianToSpherical, sphericalToCartesian, mult3 } from \"./math\";\nimport { nelderMeadMinimize } from \"./optim\";\nimport { createNamedExports } from \"typescript\";\n\nclass MultiFlybyCalculator {\n    private readonly _system!:          ISolarSystem;\n\n    private _startOrbit:                IOrbit;\n    private _endOrbit:                  IOrbit;\n    private _flybyIdSequence:           number[];\n    private _flybyBodySequence:         IOrbitingBody[];\n\n    private _startDate:                 number;\n    private _flightTimes:               number[];\n    private _flybyEncounterDates:       number[];\n    private _endDate:                   number;\n\n    private _startBody:                 ICelestialBody;\n    private _endBody:                   ICelestialBody;\n    private _transferBody:              ICelestialBody;\n\n    private _sequenceUp!:               number[];\n    private _sequenceDown!:             number[];\n\n    private _transferVelocities!:       {velOut: Vector3, velIn: Vector3}[];\n    private _flybyParams!:              FlybyParams[];\n\n    private _transfers:                 Trajectory[];\n    private _ejections:                 Trajectory[];\n    private _insertions:                Trajectory[];\n    private _flybys!:                   Trajectory[];\n\n    private _soiPatchPositions:         Vector3[];\n    private _soiPatchBodies:            IOrbitingBody[];\n    private _flybyDurations:            {inTime: number, outTime: number, total: number}[];\n\n    private _ejectionInsertionType:    \"simple\" | \"direct\" | \"oberth\";\n    private _planeChange:               boolean;\n    private _matchStartMo:              boolean;\n    private _matchEndMo:                boolean;\n    private _noInsertionBurn:           boolean;\n\n    private _maneuvers!:                Maneuver[];\n    private _deltaV!:                   number;\n\n    constructor(inputs: MultiFlybyInputs) {\n        this._system            = inputs.system;\n\n        this._startOrbit        = inputs.startOrbit;\n        this._endOrbit          = inputs.endOrbit;\n        this._flybyIdSequence   = inputs.flybyIdSequence;\n        this._flybyBodySequence = inputs.flybyIdSequence.map(i => this.bodyFromId(i) as IOrbitingBody);\n\n        this._startDate         = inputs.startDate;\n        this._flightTimes       = inputs.flightTimes;\n\n        this._startBody         = this.bodyFromId(this._startOrbit.orbiting);\n        this._endBody           = this.bodyFromId(this._endOrbit.orbiting);\n        this._transferBody      = this.bodyFromId(this.commonAttractorId(this._startBody.id, this._endBody.id));\n\n        this._ejectionInsertionType = inputs.ejectionInsertionType === undefined ? \"simple\" : inputs.ejectionInsertionType;\n        this._planeChange       = inputs.planeChange     === undefined ? false : inputs.planeChange;    \n        this._matchStartMo      = inputs.matchStartMo    === undefined ? true  : inputs.matchStartMo;\n        this._matchEndMo        = inputs.matchEndMo      === undefined ? false : inputs.matchEndMo;     \n        this._noInsertionBurn   = inputs.noInsertionBurn === undefined ? false : inputs.noInsertionBurn;\n    \n        this._flybyEncounterDates = [];\n        this._flybyParams         = [];\n        this._transferVelocities  = [];\n        this._transfers           = [];\n        this._flybys              = [];\n        this._maneuvers           = [];\n        this._ejections           = [];\n        this._insertions          = [];\n\n        this.setSequenceUp();\n        this.setSequenceDown();\n\n\n\n        const soiPatchSequence = [...this._sequenceUp.slice(0, this._sequenceUp.length - 1)];\n        for (let i=0; i<this._flybyIdSequence.length; i++) {\n            soiPatchSequence.push(this._flybyIdSequence[i], this._flybyIdSequence[i]);\n        }\n        soiPatchSequence.push(...this._sequenceDown.slice(1, this._sequenceDown.length));\n        this._soiPatchBodies = soiPatchSequence.map(i => this.bodyFromId(i) as IOrbitingBody);\n\n        // if not provided set all soi patch corrections to zero\n        if(!inputs.soiPatchPositions) {\n            this._soiPatchPositions = [];\n            for (let i=0; i<soiPatchSequence.length; i++) {\n                this._soiPatchPositions.push(vec3(0,0,0));\n            }\n        } else {\n            this._soiPatchPositions = inputs.soiPatchPositions;\n        }\n\n        let sumDurations = 0.0;\n        if(!inputs.flybyDurations) {\n            this._flybyDurations = this._flybyIdSequence.map((id, index) => {return {inTime: 0.0, outTime: 0.0, total: 0.0}});\n        } else {\n            this._flybyDurations = inputs.flybyDurations;\n            for(let i=0; i<inputs.flybyDurations.length; i++) {\n                sumDurations += inputs.flybyDurations[i].total;\n            }\n        }\n\n        this._endDate = this._startDate + this._flightTimes.reduce((p,c) => p + c) + sumDurations;\n\n        this.computeMinimalTrajectory();\n    }\n\n    public get data(): IMultiFlyby {\n        return {\n            system:                 this._system,\n            startOrbit:             this._startOrbit,\n            endOrbit:               this._endOrbit,\n            startDate:              this._startDate,\n            flightTimes:            this._flightTimes,\n            endDate:                this._endDate,\n            transferBody:           this._transferBody,\n            flybyIdSequence:        this._flybyIdSequence,\n            ejections:              this._ejections,\n            insertions:             this._insertions,\n            transfers:              this._transfers,\n            flybys:                 this._flybys,\n            soiPatchPositions:      this._soiPatchPositions,\n            flybyDurations:         this._flybyDurations,\n            planeChange:            this._planeChange,\n            matchStartMo:           this._matchStartMo,\n            matchEndMo:             this._matchEndMo,\n            noInsertionBurn:        this._noInsertionBurn,\n            maneuvers:              this._maneuvers,\n            deltaV:                 this._deltaV,\n            patchPositionError:     this.soiPatchPositionError(),\n            patchTimeError:         this.soiPatchTimeError(),\n        }\n    }\n\n    public get multiFlyby(): MultiFlyby {\n        return new MultiFlyby(this.data);\n    }\n\n    public get deltaV() {\n        return this._deltaV;\n    }\n\n    private computeMinimalTrajectory() {\n        this.clearTrajectory();\n        this.computeTransferTrajectories();\n        this.computeFlybyParams();\n        this.computeEjectionTrajectories();\n        this.computeInsertionTrajectories();\n        this.computeDeltaV();\n    }\n\n    public computeFullTrajectory() {\n        this.computeMinimalTrajectory();\n        this.computeFlybyOrbits();\n        this.setManeuvers();\n        // this.setFlybyDurations();\n    }\n\n    private clearTrajectory() {\n        this._flybyParams           = [];\n        this._flybys                = [];\n        this._ejections             = [];\n        this._insertions            = [];\n        this._transfers             = [];\n        this._transferVelocities    = [];\n        this._flybyEncounterDates   = [];\n    }\n\n    private bodyFromId(id: number) {\n        if(id === 0) {\n            return this._system.sun;\n        } else {\n            const body = this._system.orbiterIds.get(id);\n            if(!body)\n                throw new Error(`No body with id ${id}`);\n            return body;\n        }\n    }\n\n    private sequenceToSun(id: number) {\n        let bd = this.bodyFromId(id);\n        let seq: number[] = [bd.id];\n        while(bd.hasOwnProperty(\"orbiting\")) {\n            bd = this.bodyFromId((bd as IOrbitingBody).orbiting);\n            seq.push(bd.id);\n        }\n        return seq\n    }\n\n    private commonAttractorId(id1: number, id2: number) {\n        const sunSeq1 = this.sequenceToSun(id1);\n        const sunSeq2 = this.sequenceToSun(id2);\n        for(let i=0; i<sunSeq1.length; i++) {\n            if(sunSeq2.includes(sunSeq1[i])) {\n                return sunSeq1[i]\n            }\n        }\n        throw new Error('Bodies do not share a common attractor (error in defining this SolarSystem)')\n    }\n\n    private setSequenceUp() {\n        let bd = this._startBody;\n        let seq: number[] = [this._startBody.id];\n        while(bd.id !== this._transferBody.id) {\n            if(bd.hasOwnProperty(\"orbiting\")) {\n                bd = this.bodyFromId((bd as IOrbitingBody).orbiting)\n                seq.push(bd.id)\n            } else {\n                throw new Error('The start body does not orbit around the transfer body')\n            }\n        }\n        this._sequenceUp = seq;\n    }\n\n    private setSequenceDown() {\n        let bd = this._endBody;\n        let seq: number[] = [this._endBody.id];\n        while(bd.id !== this._transferBody.id) {\n            if(bd.hasOwnProperty(\"orbiting\")) {\n                bd = this.bodyFromId((bd as IOrbitingBody).orbiting)\n                seq.push(bd.id)\n            } else {\n                throw new Error('The end body does not orbit around the transfer body')\n            }\n        }\n        this._sequenceDown = seq.reverse();\n    }\n\n    private computeTransferTrajectories() {\n        let eDate = this._startDate;\n        let sPatchIdx = this._sequenceUp.length - 2;\n        for(let i=0; i<this._flightTimes.length; i++) {\n            const sDate = eDate + (i > 0 ? this._flybyDurations[i - 1].total : 0.0);\n            const fTime = this._flightTimes[i];\n            eDate = sDate + fTime;\n            if(i < this._flightTimes.length - 1) {\n                this._flybyEncounterDates.push(eDate)\n            }\n\n            const sBody = this._sequenceUp.length === 0 ? this._transferBody : i === 0 ? this.bodyFromId(this._sequenceUp[this._sequenceUp.length === 1 ? 0 : this._sequenceUp.length -  2])    : this._flybyBodySequence[i -1];\n            const eBody = i === this._flightTimes.length - 1 ? this.bodyFromId(this._sequenceDown[this._sequenceDown.length === 1 ? 0 : 1]) : this._flybyBodySequence[i];\n            const sOrb  = i === 0 && this._startBody === this._transferBody ? this._startOrbit : (sBody as IOrbitingBody).orbit;\n            const eOrb  = i === this._flightTimes.length - 1 && this._endBody === this._transferBody ? this._endOrbit : (eBody as IOrbitingBody).orbit;\n\n            const sPatchPosition = sPatchIdx < 0 ? vec3(0,0,0) : this._soiPatchPositions[sPatchIdx];\n            const ePatchPosition = sPatchIdx + 1 >= this._soiPatchPositions.length ? vec3(0,0,0) : this._soiPatchPositions[sPatchIdx + 1];\n            sPatchIdx += 2;\n\n            const trajectory = Trajectories.transferTrajectory(sOrb, eOrb, this._transferBody, sDate, fTime, eDate, this._planeChange, sPatchPosition, ePatchPosition)\n            this._transfers.push(trajectory);\n            const manLen = trajectory.maneuvers.length;\n            const sVel = Kepler.orbitToVelocityAtDate(sOrb, this._transferBody, sDate);\n            const eVel = Kepler.orbitToVelocityAtDate(eOrb, this._transferBody, eDate);\n            this._transferVelocities.push({\n                velOut: trajectory.maneuvers[0].deltaV, \n                velIn:  mult3(trajectory.maneuvers[manLen - 1].deltaV, -1),\n            });\n        }\n    }\n\n    private computeFlybyParams() {\n        for(let i=0; i<this._flybyIdSequence.length; i++) {\n            const velIn  = this._transferVelocities[i].velIn;\n            const velOut = this._transferVelocities[i+1].velOut;\n            const body   = this._flybyBodySequence[i];\n            const time   = this._flybyEncounterDates[i] + this._flybyDurations[i].inTime;\n\n            const params = FlybyCalcs.flybyParameters({velIn, velOut, body, time});\n            this._flybyParams.push(params);\n        }\n    }\n\n    private computeEjectionTrajectories() {\n        if(this._startBody.id !== this._transferBody.id) {\n            const patchPositions = this._soiPatchPositions.slice(0, this._sequenceUp.length - 1);\n            this._ejections = Trajectories.ejectionTrajectories(this._system, this._startOrbit, this._transfers[0].orbits[0], this._sequenceUp, this._startDate, this._matchStartMo, this._ejectionInsertionType, patchPositions);\n        }\n    }\n\n    private computeInsertionTrajectories() {\n        if(this._endBody.id !== this._transferBody.id) {\n            const tferLen = this._transfers.length;\n            const lastTrajLen = this._transfers[tferLen - 1].orbits.length;\n            const patchPositions = this._soiPatchPositions.slice(this._sequenceUp.length - 1 + 2 * this._flybyIdSequence.length);\n            this._insertions = Trajectories.insertionTrajectories(this._system, this._endOrbit, this._transfers[tferLen - 1].orbits[lastTrajLen - 1], this._sequenceDown, this._endDate, this._matchEndMo, this._ejectionInsertionType, patchPositions);\n        }\n    }\n\n    private computeDeltaV() {\n        let deltaV = 0.0;\n        for(let i=0; i<this._flybyParams.length; i++) {\n            deltaV += this._flybyParams[i].deltaV;\n        }\n        if(this._ejections.length > 0) {\n            for(let i=0; i<this._ejections.length; i++) {\n                for(let j=1; j<this._ejections[i].maneuvers.length; j++) {\n                    deltaV += this._ejections[i].maneuvers[j].deltaVMag;\n                }\n                if(i === 0) {\n                    deltaV += this._ejections[i].maneuvers[0].deltaVMag;\n                }\n            }\n        } else {\n            deltaV += mag3(this._transferVelocities[0].velOut);\n        }\n\n        if(this._planeChange) {\n            for(let i=0; i<this._transfers.length; i++) {\n                deltaV += this._transfers[i].maneuvers[1].deltaVMag;\n            }\n        }\n        \n        if(this._insertions.length > 0) {\n            for(let i=0; i<this._insertions.length; i++) {\n                const manLen = this._insertions[i].maneuvers.length\n                for( let j=0; j<manLen -1; j++) {\n                    deltaV += this._insertions[i].maneuvers[j].deltaVMag;\n                }\n                if(!this._noInsertionBurn) {\n                    if(i === this._insertions.length - 1) {\n                        const manLen = this._insertions[i].maneuvers.length\n                        deltaV += this._insertions[i].maneuvers[manLen - 1].deltaVMag;\n                    }\n                }\n            }\n        } else {\n            deltaV += mag3(this._transferVelocities[this._transferVelocities.length - 1].velIn);\n        }\n        \n        this._deltaV = deltaV;\n    }\n\n    private get deltaError() {\n        let error = 0.0;\n        for(let i=0; i<this._flybyParams.length; i++) {\n            error += this._flybyParams[i].error;\n        }\n        return error;\n    }\n\n    public computeFitness() {\n        if(this._deltaV === undefined) {\n            this.computeDeltaV();\n        }\n        return this._deltaV + 1e6 * this.deltaError;\n    }\n\n    private computeFlybyOrbits() {\n        for(let i=0; i<this._flybyParams.length; i++) {\n            this._flybys.push(FlybyCalcs.flybyFromParameters(this._flybyParams[i], this._flybyBodySequence[i]));\n        }\n    }\n\n    private setManeuvers() {\n        this._maneuvers = [];\n        if(this._ejections.length > 0) {\n            for(let i=0; i<this._ejections.length; i++) {\n                if(i === 0) {\n                    this._maneuvers.push(...this._ejections[i].maneuvers);\n                } else {\n                    this._maneuvers.push(...this._ejections[i].maneuvers.slice(1));\n                }\n            }\n        } else {\n            this._maneuvers.push(this._transfers[0].maneuvers[0]);\n        }\n        for(let i=0; i<this._transfers.length; i++) {\n            this._maneuvers.push(...this._transfers[i].maneuvers.slice(1,-1));\n            if(i<this._transfers.length - 1) {\n                this._maneuvers.push(...this._flybys[i].maneuvers);\n            }\n        }\n        if(this._insertions.length > 0) {\n            for(let i=0; i<this._insertions.length; i++) {\n                if(i === this._insertions.length - 1) {\n                    this._maneuvers.push(...this._insertions[i].maneuvers);\n                } else {\n                    this._maneuvers.push(...this._insertions[i].maneuvers.slice(0,-1));\n                }\n            }\n        } else {\n            const tferLen = this._transfers.length;\n            const lastManLen = this._transfers[tferLen - 1].maneuvers.length;\n            this._maneuvers.push(this._transfers[tferLen - 1].maneuvers[lastManLen - 1]);\n        }\n    }\n\n    private calculateFlybyDurations() {\n        const flybyDurations: {inTime: number, outTime: number, total: number}[] = [];\n        for(let i=0; i<this._flybys.length; i++) {\n            const inTime  = this._flybys[i].intersectTimes[1] - this._flybys[i].intersectTimes[0];\n            const outTime = this._flybys[i].intersectTimes[2] - this._flybys[i].intersectTimes[1];\n            const total = inTime + outTime;\n            flybyDurations.push({inTime, outTime, total});\n        } \n        return flybyDurations;\n    }\n\n    private setFlybyDurations() {\n        this._flybyDurations = this.calculateFlybyDurations();\n        let sumDurations = 0.0;\n        for(let i=0; i<this._flybyDurations.length; i++) {\n            sumDurations += this._flybyDurations[i].total;\n        }\n        this._endDate = this._startDate + this._flightTimes.reduce((p,c) => p + c) + sumDurations;\n    }\n\n    private calculateSoiPatches() {\n        const soiPatchPositions: Vector3[] = [];\n        for(let i=0; i<this._ejections.length; i++) {\n            const ejLen    = this._ejections[i].orbits.length;\n            const ejOrbit  = this._ejections[i].orbits[ejLen - 1];\n            const ejDate   = this._ejections[i].intersectTimes[ejLen];\n            soiPatchPositions.push(Kepler.orbitToPositionAtDate(ejOrbit, ejDate));\n        }\n        for(let i=0; i<this._flybys.length; i++) {\n            const inOrbit  = this._flybys[i].orbits[0];\n            const outOrbit = this._flybys[i].orbits[1];\n            const inDate   = this._flybys[i].intersectTimes[0];\n            const outDate  = this._flybys[i].intersectTimes[2];\n            soiPatchPositions.push(Kepler.orbitToPositionAtDate(inOrbit,  inDate));\n            soiPatchPositions.push(Kepler.orbitToPositionAtDate(outOrbit, outDate));\n\n        }\n        for(let j=0; j<this._insertions.length; j++) {\n            const inOrbit  = this._insertions[j].orbits[0];\n            const inDate   = this._insertions[j].intersectTimes[0];\n            soiPatchPositions.push(Kepler.orbitToPositionAtDate(inOrbit, inDate));\n        }\n        return soiPatchPositions\n    }\n\n    private setSoiPatchPositions() {\n        this._soiPatchPositions = this.calculateSoiPatches();\n    }\n\n    private soiPatchPositionError() {\n        const soiPatchPositions = this.calculateSoiPatches();\n        let err = 0.0;\n        for(let i=0; i<this._soiPatchPositions.length; i++) {\n            err += mag3(sub3(this._soiPatchPositions[i], soiPatchPositions[i]));\n        }\n        return err;\n    }\n\n    private soiPatchUpTimeErrors() {\n        let errs: number[] = [];\n        const lastEjIdx = this._ejections.length - 1;\n        for(let i=0; i<=lastEjIdx; i++) {\n            const ejLen = this._ejections[i].orbits.length;\n            if(i === lastEjIdx) {\n                errs.push(this._ejections[i].intersectTimes[ejLen] - this._startDate);\n            } else{\n                errs.push(this._ejections[i].intersectTimes[ejLen] - this._ejections[i+1].orbits[0].epoch);\n            }\n        }\n        return errs;\n    }\n\n    private soiPatchDownTimeErrors() {\n        let errs: number[] = [];\n        for(let i=0; i<this._insertions.length; i++) {\n            if(i === 0 ) {\n                errs.push(this._insertions[i].intersectTimes[0] - this._endDate);\n            } else {\n                const prevInLen = this._insertions[i-1].orbits.length;\n                errs.push(this._insertions[i].intersectTimes[0] - this._insertions[i-1].intersectTimes[prevInLen]);\n            }\n        }\n        return errs;\n    }\n\n    private flybyEncounterTimeErrors() {\n        let errs: number[] = [];\n        for(let i=0; i<this._flybys.length; i++) {\n            const prevTferLen = this._transfers[i].orbits.length;\n            errs.push(this._flybys[i].intersectTimes[0] - this._transfers[i].intersectTimes[prevTferLen]);\n            errs.push(this._flybys[i].intersectTimes[2] - this._transfers[i + 1].intersectTimes[0]);\n        }\n        return errs;\n    }\n\n    private soiPatchTimeError() {\n        let err = 0.0;\n        const upErrs = this.soiPatchUpTimeErrors();\n        for(let i=0; i<upErrs.length; i++) {\n            err += Math.abs(upErrs[i]);\n        }\n        const encErrs = this.flybyEncounterTimeErrors();\n        for(let i=0; i<encErrs.length; i++) {\n            err += Math.abs(encErrs[i]);\n        }\n        const downErrs = this.soiPatchDownTimeErrors();\n        for(let i=0; i<downErrs.length; i++) {\n            err += Math.abs(downErrs[i])\n        }\n        return err;\n    }\n\n    // private startTimeOffset() {\n    //     return this.soiPatchUpTimeErrors().reduce((p,c) => p + c);\n    // }\n\n    // private endTimeOffset() {\n    //     return this.soiPatchDownTimeErrors().reduce((p,c) => p + c);\n    // }\n\n    private patchPositionsToAngles(positions: Vector3[] = this._soiPatchPositions): number[] {\n        // angles are returned in a single vector, [theta_1, phi_1, theta_2, phi_2, ...]\n        const angles: number[] = [];\n        for(let i = 0; i<positions.length; i++) {\n            const sphericalPos = cartesianToSpherical(positions[i]);\n            angles.push(sphericalPos.theta, sphericalPos.phi);\n        }\n        return angles;\n    }\n\n    private setPatchPositionsFromAngles(angles: number[]) {\n        // angles should be arranged: [theta_1, phi_1, theta_2, phi_2, ...]\n        for(let i = 0; i < this._soiPatchBodies.length; i++) {\n            this._soiPatchPositions[i] = sphericalToCartesian({r: this._soiPatchBodies[i].soi, theta: angles[2*i], phi: angles[2*i + 1]});\n        }\n    }\n\n    public optimizeSoiPatches(tol: number = 0.001, maxit: number = this._soiPatchPositions.length * 100) {\n        console.log(\"\\tOptimizing flyby SoI patches\")\n        if(mag3(this._soiPatchPositions[0]) === 0) {\n            this.setSoiPatchPositions();\n            this.setFlybyDurations();\n        }\n        const objective = (x: number[]): number => {\n            // x contains alternating theta and phi positions for each patch position\n            const patchLen = this._soiPatchPositions.length;\n            this.setPatchPositionsFromAngles(x.slice(0, 2*patchLen));\n            this._startDate = x[2*patchLen];\n            this._flightTimes = x.slice(2*patchLen + 1);\n            this.computeMinimalTrajectory();\n            this.computeFlybyOrbits();\n            this.setFlybyDurations();\n            this.computeFullTrajectory();\n            return this.soiPatchPositionError() + 10 * this.soiPatchTimeError() + 1000 * this._deltaV;\n        }\n        const initialPoints: number[][] = [[...this.patchPositionsToAngles(), this._startDate, ...this._flightTimes]];\n        const numPatches = this._soiPatchBodies.length;\n        for(let i = 0; i < numPatches; i++) {\n            const newPoint1 = initialPoints[0].slice();\n            const newPoint2 = initialPoints[0].slice();\n            newPoint1[2 * i]     += randomSign() * (Math.random() * Math.PI / 24);\n            newPoint2[2 * i + 1] += randomSign() * (Math.random() * Math.PI / 12);\n            initialPoints.push(newPoint1);\n            initialPoints.push(newPoint2);\n        }\n\n        const newPoint = initialPoints[0].slice();\n        newPoint[2 * numPatches] += randomSign() * Math.random() * this._transfers[0].orbits[0].siderealPeriod / 4;\n        initialPoints.push(newPoint);\n\n        const ftStartIdx = 2 * numPatches + 1;\n        for(let i = 0; i < this._transfers.length; i++) {\n            const newPoint = initialPoints[0].slice();\n            newPoint[ftStartIdx + i] += Math.max(1, randomSign() * Math.random() * this._transfers[i].orbits[0].siderealPeriod / 4);\n            initialPoints.push(newPoint)\n        }\n\n        const optimizedPoint = nelderMeadMinimize(initialPoints, objective, tol, maxit);\n        const score = objective(optimizedPoint)\n        // console.log(this._soiPatchPositions)\n        // console.log(this.calculateSoiPatches())\n        // console.log(score)\n    };\n}\n\nexport default MultiFlybyCalculator;","import SolarSystem from \"./system\";\nimport CelestialBody from \"./body\";\nimport Orbit from \"./orbit\";\n\nclass MultiFlyby implements IMultiFlyby {\n    readonly system:                 SolarSystem;\n    readonly startOrbit:             Orbit;\n    readonly endOrbit:               Orbit;\n    readonly startDate:              number;\n    readonly flightTimes:            number[];\n    readonly endDate:                number;\n    readonly transferBody:           CelestialBody;\n    readonly flybyIdSequence:        number[];\n    readonly ejections:              Trajectory[];\n    readonly insertions:             Trajectory[];\n    readonly transfers:              Trajectory[];\n    readonly flybys:                 Trajectory[];\n    readonly maneuvers:              Maneuver[];\n    readonly deltaV:                 number;\n    readonly soiPatchPositions:      Vector3[];\n    readonly flybyDurations:         { inTime: number; outTime: number; total: number; }[];\n    readonly planeChange:            boolean;\n    readonly matchStartMo:           boolean;\n    readonly matchEndMo:             boolean;\n    readonly noInsertionBurn:        boolean;\n\n    readonly patchPositionError:     number;\n    readonly patchTimeError:         number;\n\n    constructor(inputs: IMultiFlyby) {\n        this.system = new SolarSystem(inputs.system.sun, inputs.system.orbiters);\n        this.startOrbit = new Orbit(inputs.startOrbit, this.system.bodyFromId(inputs.startOrbit.orbiting));\n        this.endOrbit = new Orbit(inputs.endOrbit, this.system.bodyFromId(inputs.endOrbit.orbiting));\n        this.startDate = inputs.startDate;\n        this.flightTimes = inputs.flightTimes;\n        if(inputs.endDate) {\n            this.endDate = inputs.endDate;\n        } else {\n            this.endDate = inputs.startDate + inputs.flightTimes.reduce((p,c) => p + c);\n        };\n        this.transferBody           = this.system.bodyFromId(inputs.transferBody.id);\n        this.flybyIdSequence        = inputs.flybyIdSequence;\n        this.transfers   = inputs.transfers;\n        this.ejections   = inputs.ejections;\n        this.insertions  = inputs.insertions;\n        this.flybys                 = inputs.flybys;\n        this.maneuvers              = inputs.maneuvers;\n        this.deltaV                 = inputs.deltaV;\n\n        this.soiPatchPositions      = inputs.soiPatchPositions;\n        this.flybyDurations         = inputs.flybyDurations;\n\n        this.planeChange     = inputs.planeChange;\n        this.matchStartMo    = inputs.matchStartMo;\n        this.matchEndMo      = inputs.matchEndMo;\n        this.noInsertionBurn = inputs.noInsertionBurn;\n\n        this.patchPositionError = inputs.patchPositionError;\n        this.patchTimeError     = inputs.patchTimeError;\n    }\n\n    public get data(): IMultiFlyby {\n        return {\n            system:                 this.system,\n            startOrbit:             this.startOrbit,\n            endOrbit:               this.endOrbit,\n            flybyIdSequence:        this.flybyIdSequence,\n            startDate:              this.startDate,\n            flightTimes:            this.flightTimes,\n            endDate:                this.endDate,\n            transferBody:           this.transferBody,\n            ejections:              this.ejections,\n            insertions:             this.insertions,\n            transfers:              this.transfers,\n            flybys:                 this.flybys,\n            maneuvers:              this.maneuvers,\n            deltaV:                 this.deltaV,\n            soiPatchPositions:      this.soiPatchPositions,\n            flybyDurations:         this.flybyDurations,\n            planeChange:            this.planeChange,\n            matchStartMo:           this.matchStartMo,\n            matchEndMo:             this.matchEndMo,\n            noInsertionBurn:        this.noInsertionBurn,\n            patchPositionError:     this.patchPositionError,\n            patchTimeError:         this.patchTimeError,\n        }\n    }\n}\n\nexport default MultiFlyby;\n"],"names":["MultiFlybyCalculator","inputs","_system","_startOrbit","_endOrbit","_flybyIdSequence","_flybyBodySequence","_startDate","_flightTimes","_flybyEncounterDates","_endDate","_startBody","_endBody","_transferBody","_sequenceUp","_sequenceDown","_transferVelocities","_flybyParams","_transfers","_ejections","_insertions","_flybys","_soiPatchPositions","_soiPatchBodies","_flybyDurations","_ejectionInsertionType","_planeChange","_matchStartMo","_matchEndMo","_noInsertionBurn","_maneuvers","_deltaV","this","system","startOrbit","endOrbit","flybyIdSequence","map","i","bodyFromId","startDate","flightTimes","orbiting","commonAttractorId","id","undefined","ejectionInsertionType","planeChange","matchStartMo","matchEndMo","noInsertionBurn","setSequenceUp","setSequenceDown","soiPatchSequence","slice","length","push","soiPatchPositions","vec3","sumDurations","flybyDurations","total","index","inTime","outTime","reduce","p","c","computeMinimalTrajectory","endDate","transferBody","ejections","insertions","transfers","flybys","maneuvers","deltaV","patchPositionError","soiPatchPositionError","patchTimeError","soiPatchTimeError","MultiFlyby","data","clearTrajectory","computeTransferTrajectories","computeFlybyParams","computeEjectionTrajectories","computeInsertionTrajectories","computeDeltaV","computeFlybyOrbits","setManeuvers","sun","body","orbiterIds","get","Error","bd","seq","hasOwnProperty","id1","id2","sunSeq1","sequenceToSun","sunSeq2","includes","reverse","eDate","sPatchIdx","sDate","fTime","sBody","eBody","sOrb","orbit","eOrb","sPatchPosition","ePatchPosition","trajectory","Trajectories","manLen","Kepler","velOut","velIn","mult3","time","params","FlybyCalcs","patchPositions","orbits","tferLen","lastTrajLen","j","deltaVMag","mag3","error","deltaError","lastManLen","intersectTimes","calculateFlybyDurations","ejLen","ejOrbit","ejDate","inOrbit","outOrbit","inDate","outDate","calculateSoiPatches","err","sub3","errs","lastEjIdx","epoch","prevInLen","prevTferLen","upErrs","soiPatchUpTimeErrors","Math","abs","encErrs","flybyEncounterTimeErrors","downErrs","soiPatchDownTimeErrors","positions","angles","sphericalPos","cartesianToSpherical","theta","phi","sphericalToCartesian","r","soi","tol","maxit","console","log","setSoiPatchPositions","setFlybyDurations","objective","x","patchLen","setPatchPositionsFromAngles","computeFullTrajectory","initialPoints","patchPositionsToAngles","numPatches","newPoint1","newPoint2","randomSign","random","PI","newPoint","siderealPeriod","ftStartIdx","max","optimizedPoint","nelderMeadMinimize","SolarSystem","orbiters","Orbit"],"sourceRoot":""}