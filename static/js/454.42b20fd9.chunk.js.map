{"version":3,"file":"static/js/454.42b20fd9.chunk.js","mappings":"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","sources":["main/libs/multi-flyby-calculator.ts","main/objects/multiflyby.ts"],"sourcesContent":["import MultiFlyby from \"../objects/multiflyby\";\nimport Trajectories from \"./trajectories\";\nimport FlybyCalcs from \"./flybycalcs\";\nimport Kepler from \"./kepler\";\nimport { sub3, mag3, vec3, randomSign, cartesianToSpherical, sphericalToCartesian, mult3 } from \"./math\";\nimport { nelderMeadMinimize } from \"./optim\";\n\nclass MultiFlybyCalculator {\n    private readonly _system!:          ISolarSystem;\n\n    private _startOrbit:                IOrbit;\n    private _endOrbit:                  IOrbit;\n    private _flybyIdSequence:           number[];\n    private _flybyBodySequence:         IOrbitingBody[];\n\n    private _startDate:                 number;\n    private _flightTimes:               number[];\n    private _flybyEncounterDates:       number[];\n    private _endDate:                   number;\n\n    private _startBody:                 ICelestialBody;\n    private _endBody:                   ICelestialBody;\n    private _transferBody:              ICelestialBody;\n\n    private _sequenceUp!:               number[];\n    private _sequenceDown!:             number[];\n\n    private _transferVelocities!:       {velOut: Vector3, velIn: Vector3}[];\n    private _flybyParams:               FlybyParams[];\n\n    private _transfers:                 Trajectory[];\n    private _ejections:                 Trajectory[];\n    private _insertions:                Trajectory[];\n    private _flybys:                    Trajectory[];\n\n    private _soiPatchPositions:         Vector3[];\n    private _soiPatchBodies:            IOrbitingBody[];\n    private _flybyDurations:            {inTime: number, outTime: number, total: number}[];\n\n    private _ejectionInsertionType:    \"fastdirect\" | \"fastoberth\" | \"direct\" | \"oberth\";\n    private _planeChange:               boolean;\n    private _matchStartMo:              boolean;\n    private _matchEndMo:                boolean;\n    private _noInsertionBurn:           boolean;\n\n    private _maneuvers:                 Maneuver[];\n    private _maneuverContexts:          String[];\n    private _deltaV!:                   number;\n\n    constructor(inputs: MultiFlybyInputs) {\n        this._system            = inputs.system;\n\n        this._startOrbit        = inputs.startOrbit;\n        this._endOrbit          = inputs.endOrbit;\n        this._flybyIdSequence   = inputs.flybyIdSequence;\n        this._flybyBodySequence = inputs.flybyIdSequence.map(i => this.bodyFromId(i) as IOrbitingBody);\n\n        this._startDate         = inputs.startDate;\n        this._flightTimes       = inputs.flightTimes;\n\n        this._startBody         = this.bodyFromId(this._startOrbit.orbiting);\n        this._endBody           = this.bodyFromId(this._endOrbit.orbiting);\n        this._transferBody      = this.bodyFromId(this.commonAttractorId(this._startBody.id, this._endBody.id));\n\n        this._ejectionInsertionType = inputs.ejectionInsertionType === undefined ? \"fastdirect\" : inputs.ejectionInsertionType;\n        this._planeChange       = inputs.planeChange     === undefined ? false : inputs.planeChange;    \n        this._matchStartMo      = inputs.matchStartMo    === undefined ? true  : inputs.matchStartMo;\n        this._matchEndMo        = inputs.matchEndMo      === undefined ? false : inputs.matchEndMo;     \n        this._noInsertionBurn   = inputs.noInsertionBurn === undefined ? false : inputs.noInsertionBurn;\n    \n        this._flybyEncounterDates = [];\n        this._flybyParams         = [];\n        this._transferVelocities  = [];\n        this._transfers           = [];\n        this._flybys              = [];\n        this._maneuvers           = [];\n        this._maneuverContexts    = [];\n        this._ejections           = [];\n        this._insertions          = [];\n\n        this.setSequenceUp();\n        this.setSequenceDown();\n\n\n\n        const soiPatchSequence = [...this._sequenceUp.slice(0, this._sequenceUp.length - 1)];\n        for (let i=0; i<this._flybyIdSequence.length; i++) {\n            soiPatchSequence.push(this._flybyIdSequence[i], this._flybyIdSequence[i]);\n        }\n        soiPatchSequence.push(...this._sequenceDown.slice(1, this._sequenceDown.length));\n        this._soiPatchBodies = soiPatchSequence.map(i => this.bodyFromId(i) as IOrbitingBody);\n\n        // if not provided set all soi patch corrections to zero\n        if(!inputs.soiPatchPositions) {\n            this._soiPatchPositions = [];\n            for (let i=0; i<soiPatchSequence.length; i++) {\n                this._soiPatchPositions.push(vec3(0,0,0));\n            }\n        } else {\n            this._soiPatchPositions = inputs.soiPatchPositions;\n        }\n\n        let sumDurations = 0.0;\n        if(!inputs.flybyDurations) {\n            this._flybyDurations = this._flybyIdSequence.map((id, index) => {return {inTime: 0.0, outTime: 0.0, total: 0.0}});\n        } else {\n            this._flybyDurations = inputs.flybyDurations;\n            for(let i=0; i<inputs.flybyDurations.length; i++) {\n                sumDurations += inputs.flybyDurations[i].total;\n            }\n        }\n\n        this._endDate = this._startDate + this._flightTimes.reduce((p,c) => p + c) + sumDurations;\n\n        this.computeMinimalTrajectory();\n    }\n\n    public get data(): IMultiFlyby {\n        return {\n            system:                 this._system,\n            startOrbit:             this._startOrbit,\n            endOrbit:               this._endOrbit,\n            startDate:              this._startDate,\n            flightTimes:            this._flightTimes,\n            endDate:                this._endDate,\n            transferBody:           this._transferBody,\n            flybyIdSequence:        this._flybyIdSequence,\n            ejections:              this._ejections,\n            insertions:             this._insertions,\n            transfers:              this._transfers,\n            flybys:                 this._flybys,\n            soiPatchPositions:      this._soiPatchPositions,\n            flybyDurations:         this._flybyDurations,\n            ejectionInsertionType:  this._ejectionInsertionType,\n            planeChange:            this._planeChange,\n            matchStartMo:           this._matchStartMo,\n            matchEndMo:             this._matchEndMo,\n            noInsertionBurn:        this._noInsertionBurn,\n            maneuvers:              this._maneuvers,\n            maneuverContexts:       this._maneuverContexts,\n            deltaV:                 this._deltaV,\n            patchPositionError:     this.soiPatchPositionError(),\n            patchTimeError:         this.soiPatchTimeError(),\n        }\n    }\n\n    public get multiFlyby(): MultiFlyby {\n        return new MultiFlyby(this.data);\n    }\n\n    public get deltaV() {\n        return this._deltaV;\n    }\n\n    private computeMinimalTrajectory() {\n        this.clearTrajectory();\n        this.computeTransferTrajectories();\n        this.computeFlybyParams();\n        this.computeEjectionTrajectories();\n        this.computeInsertionTrajectories();\n        this.computeDeltaV();\n    }\n\n    public computeFullTrajectory() {\n        this.computeMinimalTrajectory();\n        this.computeFlybyOrbits();\n        this.setManeuvers();\n        // this.setFlybyDurations();\n    }\n\n    private clearTrajectory() {\n        this._flybyParams           = [];\n        this._flybys                = [];\n        this._ejections             = [];\n        this._insertions            = [];\n        this._transfers             = [];\n        this._transferVelocities    = [];\n        this._flybyEncounterDates   = [];\n        this._maneuvers             = [];\n        this._maneuverContexts      = [];\n    }\n\n    private bodyFromId(id: number) {\n        if(id === 0) {\n            return this._system.sun;\n        } else {\n            const body = this._system.orbiterIds.get(id);\n            if(!body)\n                throw new Error(`No body with id ${id}`);\n            return body;\n        }\n    }\n\n    private sequenceToSun(id: number) {\n        let bd = this.bodyFromId(id);\n        let seq: number[] = [bd.id];\n        while(bd.hasOwnProperty(\"orbiting\")) {\n            bd = this.bodyFromId((bd as IOrbitingBody).orbiting);\n            seq.push(bd.id);\n        }\n        return seq\n    }\n\n    private commonAttractorId(id1: number, id2: number) {\n        const sunSeq1 = this.sequenceToSun(id1);\n        const sunSeq2 = this.sequenceToSun(id2);\n        for(let i=0; i<sunSeq1.length; i++) {\n            if(sunSeq2.includes(sunSeq1[i])) {\n                return sunSeq1[i]\n            }\n        }\n        throw new Error('Bodies do not share a common attractor (error in defining this SolarSystem)')\n    }\n\n    private setSequenceUp() {\n        let bd = this._startBody;\n        let seq: number[] = [this._startBody.id];\n        while(bd.id !== this._transferBody.id) {\n            if(bd.hasOwnProperty(\"orbiting\")) {\n                bd = this.bodyFromId((bd as IOrbitingBody).orbiting)\n                seq.push(bd.id)\n            } else {\n                throw new Error('The start body does not orbit around the transfer body')\n            }\n        }\n        this._sequenceUp = seq;\n    }\n\n    private setSequenceDown() {\n        let bd = this._endBody;\n        let seq: number[] = [this._endBody.id];\n        while(bd.id !== this._transferBody.id) {\n            if(bd.hasOwnProperty(\"orbiting\")) {\n                bd = this.bodyFromId((bd as IOrbitingBody).orbiting)\n                seq.push(bd.id)\n            } else {\n                throw new Error('The end body does not orbit around the transfer body')\n            }\n        }\n        this._sequenceDown = seq.reverse();\n    }\n\n    private computeTransferTrajectories() {\n        let eDate = this._startDate;\n        let sPatchIdx = this._sequenceUp.length - 2;\n        for(let i=0; i<this._flightTimes.length; i++) {\n            const sDate = eDate + (i > 0 ? this._flybyDurations[i - 1].total : 0.0);\n            const fTime = this._flightTimes[i];\n            eDate = sDate + fTime;\n            if(i < this._flightTimes.length - 1) {\n                this._flybyEncounterDates.push(eDate)\n            }\n\n            const sBody = this._sequenceUp.length === 0 ? this._transferBody : i === 0 ? this.bodyFromId(this._sequenceUp[this._sequenceUp.length === 1 ? 0 : this._sequenceUp.length -  2])    : this._flybyBodySequence[i -1];\n            const eBody = i === this._flightTimes.length - 1 ? this.bodyFromId(this._sequenceDown[this._sequenceDown.length === 1 ? 0 : 1]) : this._flybyBodySequence[i];\n            const sOrb  = i === 0 && this._startBody === this._transferBody ? this._startOrbit : (sBody as IOrbitingBody).orbit;\n            const eOrb  = i === this._flightTimes.length - 1 && this._endBody === this._transferBody ? this._endOrbit : (eBody as IOrbitingBody).orbit;\n\n            const sPatchPosition = sPatchIdx < 0 ? vec3(0,0,0) : this._soiPatchPositions[sPatchIdx];\n            const ePatchPosition = sPatchIdx + 1 >= this._soiPatchPositions.length ? vec3(0,0,0) : this._soiPatchPositions[sPatchIdx + 1];\n            sPatchIdx += 2;\n\n            const trajectory = Trajectories.transferTrajectory(sOrb, eOrb, this._transferBody, sDate, fTime, eDate, this._planeChange, sPatchPosition, ePatchPosition)\n            this._transfers.push(trajectory);\n            const manLen = trajectory.maneuvers.length;\n            this._transferVelocities.push({\n                velOut: trajectory.maneuvers[0].deltaV, \n                velIn:  mult3(trajectory.maneuvers[manLen - 1].deltaV, -1),\n            });\n        }\n    }\n\n    private computeFlybyParams() {\n        for(let i=0; i<this._flybyIdSequence.length; i++) {\n            const velIn  = this._transferVelocities[i].velIn;\n            const velOut = this._transferVelocities[i+1].velOut;\n            const body   = this._flybyBodySequence[i];\n            const time   = this._flybyEncounterDates[i] + this._flybyDurations[i].inTime;\n\n            const params = FlybyCalcs.flybyParameters({velIn, velOut, body, time});\n            this._flybyParams.push(params);\n        }\n    }\n\n    private computeEjectionTrajectories() {\n        if(this._startBody.id !== this._transferBody.id) {\n            const patchPositions = this._soiPatchPositions.slice(0, this._sequenceUp.length - 1);\n            this._ejections = Trajectories.ejectionTrajectories(this._system, this._startOrbit, this._transfers[0].orbits[0], this._sequenceUp, this._startDate, this._matchStartMo, this._ejectionInsertionType, patchPositions);\n        }\n        if(this._ejections.length > 0 && !this._matchStartMo) {\n            this._startOrbit = Kepler.stateToOrbit(this._ejections[0].maneuvers[0].preState, this._startBody)\n        }\n    }\n\n    private computeInsertionTrajectories() {\n        if(this._endBody.id !== this._transferBody.id) {\n            const tferLen = this._transfers.length;\n            const lastTrajLen = this._transfers[tferLen - 1].orbits.length;\n            const patchPositions = this._soiPatchPositions.slice(this._sequenceUp.length - 1 + 2 * this._flybyIdSequence.length);\n            this._insertions = Trajectories.insertionTrajectories(this._system, this._endOrbit, this._transfers[tferLen - 1].orbits[lastTrajLen - 1], this._sequenceDown, this._endDate, this._matchEndMo, this._ejectionInsertionType, patchPositions);\n        }\n        const nInsertions = this._insertions.length;\n        if(nInsertions > 0 && !this._matchEndMo) {\n            const nManeuvers = this._insertions[nInsertions-1].maneuvers.length;\n            this._endOrbit = Kepler.stateToOrbit(this._insertions[nInsertions-1].maneuvers[nManeuvers-1].postState, this._endBody)\n        }\n    }\n\n    private computeDeltaV() {\n        let deltaV = 0.0;\n        for(let i=0; i<this._flybyParams.length; i++) {\n            deltaV += this._flybyParams[i].deltaV;\n        }\n        if(this._ejections.length > 0) {\n            for(let i=0; i<this._ejections.length; i++) {\n                for(let j=1; j<this._ejections[i].maneuvers.length; j++) {\n                    deltaV += this._ejections[i].maneuvers[j].deltaVMag;\n                }\n                if(i === 0) {\n                    deltaV += this._ejections[i].maneuvers[0].deltaVMag;\n                }\n            }\n        } else {\n            deltaV += mag3(this._transferVelocities[0].velOut);\n        }\n\n        if(this._planeChange) {\n            for(let i=0; i<this._transfers.length; i++) {\n                deltaV += this._transfers[i].maneuvers[1].deltaVMag;\n            }\n        }\n        \n        if(this._insertions.length > 0) {\n            for(let i=0; i<this._insertions.length; i++) {\n                const manLen = this._insertions[i].maneuvers.length\n                for( let j=0; j<manLen -1; j++) {\n                    deltaV += this._insertions[i].maneuvers[j].deltaVMag;\n                }\n                if(!this._noInsertionBurn) {\n                    if(i === this._insertions.length - 1) {\n                        const manLen = this._insertions[i].maneuvers.length\n                        deltaV += this._insertions[i].maneuvers[manLen - 1].deltaVMag;\n                    }\n                }\n            }\n        } else {\n            deltaV += mag3(this._transferVelocities[this._transferVelocities.length - 1].velIn);\n        }\n        \n        this._deltaV = deltaV;\n    }\n\n    private get deltaError() {\n        let error = 0.0;\n        for(let i=0; i<this._flybyParams.length; i++) {\n            error += this._flybyParams[i].error;\n        }\n        return error;\n    }\n\n    public computeFitness() {\n        if(this._deltaV === undefined) {\n            this.computeDeltaV();\n        }\n        return this._deltaV + 1e6 * this.deltaError;\n    }\n\n    private computeFlybyOrbits() {\n        for(let i=0; i<this._flybyParams.length; i++) {\n            this._flybys.push(FlybyCalcs.flybyFromParameters(this._flybyParams[i], this._flybyBodySequence[i]));\n        }\n    }\n\n    private setManeuvers() {\n        this._maneuvers = [];\n        this._maneuverContexts = [];\n        if(this._ejections.length > 0) {\n            for(let i=0; i<this._ejections.length; i++) {\n                if(i === 0) {\n                    const maneuvers = this._ejections[i].maneuvers;\n                    const bodyname = this.bodyFromId(this._ejections[i].orbits[0].orbiting).name;\n                    const contexts = [\"Departure Burn\"];\n                    for(let j=0; j<maneuvers.length - 1; j++) {\n                        contexts.push(\"Oberth Maneuver Burn over \" + bodyname)\n                    }\n                    this._maneuvers.push(...maneuvers);\n                    this._maneuverContexts.push(...contexts);\n                } else {\n                    const maneuvers = this._ejections[i].maneuvers.slice(1)\n                    const bodyname = this.bodyFromId(this._ejections[i].orbits[0].orbiting).name;\n                    const contexts: String[] = [];\n                    for(let j=0; j<maneuvers.length; j++) {\n                        contexts.push(\"Oberth Maneuver Burn over \" + bodyname)\n                    }\n                    this._maneuvers.push(...maneuvers);\n                    this._maneuverContexts.push(...contexts);\n                }\n            }\n        } else {\n            this._maneuvers.push(this._transfers[0].maneuvers[0]);\n            this._maneuverContexts.push(\"Departure Burn\");\n        }\n        for(let i=0; i<this._transfers.length; i++) {\n            const tferManeuvers = this._transfers[i].maneuvers.slice(1,-1)\n            const tferContexts: String[] = [];\n            for(let j=0; j<tferManeuvers.length; j++) {\n                tferContexts.push(\"Plane Change Burn\");\n            }\n            this._maneuvers.push(...tferManeuvers);\n            this._maneuverContexts.push(...tferContexts)\n            if(i<this._transfers.length - 1) {\n                this._maneuvers.push(...this._flybys[i].maneuvers);\n                const flybyContexts: String[] = [];\n                for(let j=0; j<this._flybys[i].maneuvers.length; j++) {\n                    flybyContexts.push(\"Flyby Burn over \" + this._flybyBodySequence[i].name);\n                }\n                this._maneuverContexts.push(...flybyContexts);\n            }\n        }\n        if(this._insertions.length > 0) {\n            for(let i=0; i<this._insertions.length; i++) {\n                if(i === this._insertions.length - 1) {\n                    const maneuvers = this._insertions[i].maneuvers;\n                    const bodyname = this.bodyFromId(this._insertions[i].orbits[0].orbiting).name;\n                    const contexts: string[] = [];\n                    for(let j=0; j<maneuvers.length - 1; j++) {\n                        contexts.push(\"Oberth Maneuver Burn over \" + bodyname);\n                    }\n                    contexts.push(\"Arrival Burn\");\n                    this._maneuvers.push(...maneuvers);\n                    this._maneuverContexts.push(...contexts);\n                } else {\n                    const maneuvers = this._insertions[i].maneuvers.slice(0,-1);\n                    const bodyname = this.bodyFromId(this._insertions[i].orbits[0].orbiting).name;\n                    const contexts: String[] = [];\n                    for(let j=0; j<maneuvers.length; j++) {\n                        contexts.push(\"Oberth Maneuver Burn over \" + bodyname)\n                    }\n                    this._maneuvers.push(...maneuvers);\n                    this._maneuverContexts.push(...contexts)\n                }\n            }\n        } else {\n            const tferLen = this._transfers.length;\n            const lastManLen = this._transfers[tferLen - 1].maneuvers.length;\n            this._maneuvers.push(this._transfers[tferLen - 1].maneuvers[lastManLen - 1]);\n            this._maneuverContexts.push(\"Arrival Burn\")\n        }\n    }\n\n    private calculateFlybyDurations() {\n        const flybyDurations: {inTime: number, outTime: number, total: number}[] = [];\n        for(let i=0; i<this._flybys.length; i++) {\n            const inTime  = this._flybys[i].intersectTimes[1] - this._flybys[i].intersectTimes[0];\n            const outTime = this._flybys[i].intersectTimes[2] - this._flybys[i].intersectTimes[1];\n            const total = inTime + outTime;\n            flybyDurations.push({inTime, outTime, total});\n        } \n        return flybyDurations;\n    }\n\n    private setFlybyDurations() {\n        this._flybyDurations = this.calculateFlybyDurations();\n        let sumDurations = 0.0;\n        for(let i=0; i<this._flybyDurations.length; i++) {\n            sumDurations += this._flybyDurations[i].total;\n        }\n        this._endDate = this._startDate + this._flightTimes.reduce((p,c) => p + c) + sumDurations;\n    }\n\n    private calculateSoiPatches() {\n        const soiPatchPositions: Vector3[] = [];\n        for(let i=0; i<this._ejections.length; i++) {\n            const ejLen    = this._ejections[i].orbits.length;\n            const ejOrbit  = this._ejections[i].orbits[ejLen - 1];\n            const ejDate   = this._ejections[i].intersectTimes[ejLen];\n            soiPatchPositions.push(Kepler.orbitToPositionAtDate(ejOrbit, ejDate));\n        }\n        for(let i=0; i<this._flybys.length; i++) {\n            const inOrbit  = this._flybys[i].orbits[0];\n            const outOrbit = this._flybys[i].orbits[1];\n            const inDate   = this._flybys[i].intersectTimes[0];\n            const outDate  = this._flybys[i].intersectTimes[2];\n            soiPatchPositions.push(Kepler.orbitToPositionAtDate(inOrbit,  inDate));\n            soiPatchPositions.push(Kepler.orbitToPositionAtDate(outOrbit, outDate));\n\n        }\n        for(let j=0; j<this._insertions.length; j++) {\n            const inOrbit  = this._insertions[j].orbits[0];\n            const inDate   = this._insertions[j].intersectTimes[0];\n            soiPatchPositions.push(Kepler.orbitToPositionAtDate(inOrbit, inDate));\n        }\n        return soiPatchPositions\n    }\n\n    private setSoiPatchPositions() {\n        this._soiPatchPositions = this.calculateSoiPatches();\n    }\n\n    private soiPatchPositionError() {\n        const soiPatchPositions = this.calculateSoiPatches();\n        let err = 0.0;\n        for(let i=0; i<this._soiPatchPositions.length; i++) {\n            err += mag3(sub3(this._soiPatchPositions[i], soiPatchPositions[i]));\n        }\n        return err;\n    }\n\n    private soiPatchUpTimeErrors() {\n        let errs: number[] = [];\n        const lastEjIdx = this._ejections.length - 1;\n        for(let i=0; i<=lastEjIdx; i++) {\n            const ejLen = this._ejections[i].orbits.length;\n            if(i === lastEjIdx) {\n                errs.push(this._ejections[i].intersectTimes[ejLen] - this._startDate);\n            } else{\n                errs.push(this._ejections[i].intersectTimes[ejLen] - this._ejections[i+1].orbits[0].epoch);\n            }\n        }\n        return errs;\n    }\n\n    private soiPatchDownTimeErrors() {\n        let errs: number[] = [];\n        for(let i=0; i<this._insertions.length; i++) {\n            if(i === 0 ) {\n                errs.push(this._insertions[i].intersectTimes[0] - this._endDate);\n            } else {\n                const prevInLen = this._insertions[i-1].orbits.length;\n                errs.push(this._insertions[i].intersectTimes[0] - this._insertions[i-1].intersectTimes[prevInLen]);\n            }\n        }\n        return errs;\n    }\n\n    private flybyEncounterTimeErrors() {\n        let errs: number[] = [];\n        for(let i=0; i<this._flybys.length; i++) {\n            const prevTferLen = this._transfers[i].orbits.length;\n            errs.push(this._flybys[i].intersectTimes[0] - this._transfers[i].intersectTimes[prevTferLen]);\n            errs.push(this._flybys[i].intersectTimes[2] - this._transfers[i + 1].intersectTimes[0]);\n        }\n        return errs;\n    }\n\n    private soiPatchTimeError() {\n        let err = 0.0;\n        const upErrs = this.soiPatchUpTimeErrors();\n        for(let i=0; i<upErrs.length; i++) {\n            err += Math.abs(upErrs[i]);\n        }\n        const encErrs = this.flybyEncounterTimeErrors();\n        for(let i=0; i<encErrs.length; i++) {\n            err += Math.abs(encErrs[i]);\n        }\n        const downErrs = this.soiPatchDownTimeErrors();\n        for(let i=0; i<downErrs.length; i++) {\n            err += Math.abs(downErrs[i])\n        }\n        return err;\n    }\n\n    // private startTimeOffset() {\n    //     return this.soiPatchUpTimeErrors().reduce((p,c) => p + c);\n    // }\n\n    // private endTimeOffset() {\n    //     return this.soiPatchDownTimeErrors().reduce((p,c) => p + c);\n    // }\n\n    private patchPositionsToAngles(positions: Vector3[] = this._soiPatchPositions): number[] {\n        // angles are returned in a single vector, [theta_1, phi_1, theta_2, phi_2, ...]\n        const angles: number[] = [];\n        for(let i = 0; i<positions.length; i++) {\n            const sphericalPos = cartesianToSpherical(positions[i]);\n            angles.push(sphericalPos.theta, sphericalPos.phi);\n        }\n        return angles;\n    }\n\n    private setPatchPositionsFromAngles(angles: number[]) {\n        // angles should be arranged: [theta_1, phi_1, theta_2, phi_2, ...]\n        for(let i = 0; i < this._soiPatchBodies.length; i++) {\n            this._soiPatchPositions[i] = sphericalToCartesian({r: this._soiPatchBodies[i].soi, theta: angles[2*i], phi: angles[2*i + 1]});\n        }\n    }\n\n    public optimizeSoiPatches(tol: number = 0.001, maxit: number = this._soiPatchPositions.length * 100) {\n        console.log(\"\\tOptimizing flyby SoI patches\")\n        if(mag3(this._soiPatchPositions[0]) === 0) {\n            this.setSoiPatchPositions();\n            this.setFlybyDurations();\n        }\n        const objective = (x: number[]): number => {\n            // x contains alternating theta and phi positions for each patch position\n            const patchLen = this._soiPatchPositions.length;\n            this.setPatchPositionsFromAngles(x.slice(0, 2*patchLen));\n            this._startDate = x[2*patchLen];\n            this._flightTimes = x.slice(2*patchLen + 1);\n            this.computeMinimalTrajectory();\n            this.computeFlybyOrbits();\n            this.setFlybyDurations();\n            this.computeFullTrajectory();\n            return this.soiPatchPositionError() + 10 * this.soiPatchTimeError() + 5000 * this._deltaV;\n        }\n        const initialPoints: number[][] = [[...this.patchPositionsToAngles(), this._startDate, ...this._flightTimes]];\n        const numPatches = this._soiPatchBodies.length;\n        for(let i = 0; i < numPatches; i++) {\n            const newPoint1 = initialPoints[0].slice();\n            const newPoint2 = initialPoints[0].slice();\n            newPoint1[2 * i]     += randomSign() * (Math.random() * Math.PI / 24);\n            newPoint2[2 * i + 1] += randomSign() * (Math.random() * Math.PI / 12);\n            initialPoints.push(newPoint1);\n            initialPoints.push(newPoint2);\n        }\n\n        const newPoint = initialPoints[0].slice();\n        newPoint[2 * numPatches] += randomSign() * Math.random() * this._transfers[0].orbits[0].siderealPeriod / 4;\n        initialPoints.push(newPoint);\n\n        const ftStartIdx = 2 * numPatches + 1;\n        for(let i = 0; i < this._transfers.length; i++) {\n            const newPoint = initialPoints[0].slice();\n            newPoint[ftStartIdx + i] += Math.max(1, randomSign() * Math.random() * this._transfers[i].orbits[0].siderealPeriod / 4);\n            initialPoints.push(newPoint)\n        }\n\n        const optimizedPoint = nelderMeadMinimize(initialPoints, objective, tol, maxit);\n        objective(optimizedPoint)\n        // const score = objective(optimizedPoint)\n        // console.log(this._soiPatchPositions)\n        // console.log(this.calculateSoiPatches())\n        // console.log(score)\n    };\n}\n\nexport default MultiFlybyCalculator;","import SolarSystem from \"./system\";\nimport CelestialBody from \"./body\";\nimport Orbit from \"./orbit\";\n\nclass MultiFlyby implements IMultiFlyby {\n    readonly system:                 SolarSystem;\n    readonly startOrbit:             Orbit;\n    readonly endOrbit:               Orbit;\n    readonly startDate:              number;\n    readonly flightTimes:            number[];\n    readonly endDate:                number;\n    readonly transferBody:           CelestialBody;\n    readonly flybyIdSequence:        number[];\n    readonly ejections:              Trajectory[];\n    readonly insertions:             Trajectory[];\n    readonly transfers:              Trajectory[];\n    readonly flybys:                 Trajectory[];\n    readonly maneuvers:              Maneuver[];\n    readonly maneuverContexts:       String[];\n    readonly deltaV:                 number;\n    readonly soiPatchPositions:      Vector3[];\n    readonly flybyDurations:         { inTime: number; outTime: number; total: number; }[];\n    readonly ejectionInsertionType:  \"fastdirect\" | \"direct\" | \"fastoberth\" | \"oberth\";\n    readonly planeChange:            boolean;\n    readonly matchStartMo:           boolean;\n    readonly matchEndMo:             boolean;\n    readonly noInsertionBurn:        boolean;\n\n    readonly patchPositionError:     number;\n    readonly patchTimeError:         number;\n\n    constructor(inputs: IMultiFlyby) {\n        this.system = new SolarSystem(inputs.system.sun, inputs.system.orbiters);\n        this.startOrbit = new Orbit(inputs.startOrbit, this.system.bodyFromId(inputs.startOrbit.orbiting));\n        this.endOrbit = new Orbit(inputs.endOrbit, this.system.bodyFromId(inputs.endOrbit.orbiting));\n        this.startDate = inputs.startDate;\n        this.flightTimes = inputs.flightTimes;\n        if(inputs.endDate) {\n            this.endDate = inputs.endDate;\n        } else {\n            this.endDate = inputs.startDate + inputs.flightTimes.reduce((p,c) => p + c);\n        };\n        this.transferBody           = this.system.bodyFromId(inputs.transferBody.id);\n        this.flybyIdSequence        = inputs.flybyIdSequence;\n        this.transfers              = inputs.transfers;\n        this.ejections              = inputs.ejections;\n        this.insertions             = inputs.insertions;\n        this.flybys                 = inputs.flybys;\n        this.maneuvers              = inputs.maneuvers;\n        this.maneuverContexts       = inputs.maneuverContexts;\n        this.deltaV                 = inputs.deltaV;\n\n        this.soiPatchPositions      = inputs.soiPatchPositions;\n        this.flybyDurations         = inputs.flybyDurations;\n\n        this.ejectionInsertionType = inputs.ejectionInsertionType;\n        \n        this.planeChange            = inputs.planeChange;\n        this.matchStartMo           = inputs.matchStartMo;\n        this.matchEndMo             = inputs.matchEndMo;\n        this.noInsertionBurn        = inputs.noInsertionBurn;\n\n        this.patchPositionError     = inputs.patchPositionError;\n        this.patchTimeError         = inputs.patchTimeError;\n    }\n\n    public get data(): IMultiFlyby {\n        return {\n            system:                 this.system,\n            startOrbit:             this.startOrbit,\n            endOrbit:               this.endOrbit,\n            flybyIdSequence:        this.flybyIdSequence,\n            startDate:              this.startDate,\n            flightTimes:            this.flightTimes,\n            endDate:                this.endDate,\n            transferBody:           this.transferBody,\n            ejections:              this.ejections,\n            insertions:             this.insertions,\n            transfers:              this.transfers,\n            flybys:                 this.flybys,\n            maneuvers:              this.maneuvers,\n            maneuverContexts:       this.maneuverContexts,\n            deltaV:                 this.deltaV,\n            soiPatchPositions:      this.soiPatchPositions,\n            flybyDurations:         this.flybyDurations,\n            ejectionInsertionType:  this.ejectionInsertionType,\n            planeChange:            this.planeChange,\n            matchStartMo:           this.matchStartMo,\n            matchEndMo:             this.matchEndMo,\n            noInsertionBurn:        this.noInsertionBurn,\n            patchPositionError:     this.patchPositionError,\n            patchTimeError:         this.patchTimeError,\n        }\n    }\n}\n\nexport default MultiFlyby;\n"],"names":["MultiFlybyCalculator","inputs","_system","_startOrbit","_endOrbit","_flybyIdSequence","_flybyBodySequence","_startDate","_flightTimes","_flybyEncounterDates","_endDate","_startBody","_endBody","_transferBody","_sequenceUp","_sequenceDown","_transferVelocities","_flybyParams","_transfers","_ejections","_insertions","_flybys","_soiPatchPositions","_soiPatchBodies","_flybyDurations","_ejectionInsertionType","_planeChange","_matchStartMo","_matchEndMo","_noInsertionBurn","_maneuvers","_maneuverContexts","_deltaV","this","system","startOrbit","endOrbit","flybyIdSequence","map","i","bodyFromId","startDate","flightTimes","orbiting","commonAttractorId","id","undefined","ejectionInsertionType","planeChange","matchStartMo","matchEndMo","noInsertionBurn","setSequenceUp","setSequenceDown","soiPatchSequence","slice","length","push","soiPatchPositions","vec3","sumDurations","flybyDurations","total","index","inTime","outTime","reduce","p","c","computeMinimalTrajectory","endDate","transferBody","ejections","insertions","transfers","flybys","maneuvers","maneuverContexts","deltaV","patchPositionError","soiPatchPositionError","patchTimeError","soiPatchTimeError","MultiFlyby","data","clearTrajectory","computeTransferTrajectories","computeFlybyParams","computeEjectionTrajectories","computeInsertionTrajectories","computeDeltaV","computeFlybyOrbits","setManeuvers","sun","body","orbiterIds","get","Error","bd","seq","hasOwnProperty","id1","id2","sunSeq1","sequenceToSun","sunSeq2","includes","reverse","eDate","sPatchIdx","sDate","fTime","sBody","eBody","sOrb","orbit","eOrb","sPatchPosition","ePatchPosition","trajectory","Trajectories","manLen","velOut","velIn","mult3","time","params","FlybyCalcs","patchPositions","orbits","Kepler","preState","tferLen","lastTrajLen","nInsertions","nManeuvers","postState","j","deltaVMag","mag3","error","deltaError","bodyname","name","contexts","tferManeuvers","tferContexts","flybyContexts","lastManLen","intersectTimes","calculateFlybyDurations","ejLen","ejOrbit","ejDate","inOrbit","outOrbit","inDate","outDate","calculateSoiPatches","err","sub3","errs","lastEjIdx","epoch","prevInLen","prevTferLen","upErrs","soiPatchUpTimeErrors","Math","abs","encErrs","flybyEncounterTimeErrors","downErrs","soiPatchDownTimeErrors","positions","angles","sphericalPos","cartesianToSpherical","theta","phi","sphericalToCartesian","r","soi","tol","maxit","console","log","setSoiPatchPositions","setFlybyDurations","objective","x","patchLen","setPatchPositionsFromAngles","computeFullTrajectory","initialPoints","patchPositionsToAngles","numPatches","newPoint1","newPoint2","randomSign","random","PI","newPoint","siderealPeriod","ftStartIdx","max","optimizedPoint","nelderMeadMinimize","SolarSystem","orbiters","Orbit"],"sourceRoot":""}